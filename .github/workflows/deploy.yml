name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    name: Deploy to private server
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup SSH key
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Copy project files to server
      run: |
        rsync -avz \
          --exclude='node_modules' \
          --exclude='bot_sessions' \
          --exclude='.env' \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='*.log' \
          --exclude='*.qr.png' \
          --exclude='coverage' \
          --exclude='dist' \
          --exclude='build' \
          --exclude='*.tmp' \
          --exclude='*.temp' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.SERVER_PATH }}/
          
    - name: Deploy with Docker Compose
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ${{ secrets.SERVER_PATH }}
          # Pull latest images
          docker-compose pull
          # Stop existing containers
          docker-compose down
          # Build and start services
          docker-compose up -d --build
          # Clean up unused images
          docker image prune -f
        EOF
        
    - name: Verify deployment
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          cd ${{ secrets.SERVER_PATH }}
          # Check if containers are running
          if docker compose ps | grep -q "Up"; then
            echo "‚úÖ Deployment successful - containers are running"
            docker-compose ps
          else
            echo "‚ùå Deployment failed - containers are not running"
            docker-compose logs
            exit 1
          fi
          
          # Optional: Check if the bot service is accessible
          if docker compose exec -T bot curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Bot service is accessible"
          else
            echo "‚ö†Ô∏è  Bot service may not be fully ready yet (this is normal during startup)"
          fi
        EOF
        
    - name: Deployment summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üìù Summary:"
        echo "- Files copied to server (excluding node_modules, bot_sessions, .env)"
        echo "- Docker containers rebuilt and started"
        echo "- Deployment verified"
        echo "- Server .env file preserved"
